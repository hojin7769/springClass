
--------------------------------------------------------------		
 1. 트랜잭션의 전파 방식 ( Propagation ) p512
 	1) 전파 방식 ( Propagation) ? 	현재 진행중인 트랜잭션 처리 메서드 안에서
 									또 다른 트랜잭션이 진행될 때 어떻게 트랜잭션을 처리할 것인지에
 									대한 방식 설정
 	2) 예제
 		(1) 공지사항 등록 ( 2번 )
 		(2) 포인트 증가 
 		
 		
 		@Transactional
 		insertAndPointUpOfMember(){
 		
 			insert();
 			insert();
 		
 		}
 		@Transactional
		insert(){
		
		}
	3) kenik 계정의 point =>2 -> 1 수정
	
		update member
		set point = 1
		where id = 'hojin';
		Commit;
		------------------------
		select *
		FROM MEMBER;
		
	4)  NLNoticeDao.java    insertAndPointUpOfMember(){} 수정
	
	
	5) 테스트 과정 설명 ( 전파 방식 )
	
		noticeReg.htm(POST)-> noticeReg( [Notice notice] , HttpServletRequest request )
		새글 작성후 저장		컨트롤러 메서드가 호출
			@트랜잭션
		-> this.noticeDao.insertAndPointUpOfMember(notice, "hojin");
							
			@트랜잭션						@트랜잭션
			insert()						insert()
			
			새글 insert 성공				새글 insert 성공
			포인트증가 성공 2				포인트증가 실패 3
	
			
		hojin 계정의 포인트가 1
		새글 작성후 저장
		
		
		propagation = Propagation.REQUIRED ? 현재 진행중인 트랜잭션이 있다면 합쳐서
											 하나의 트랜잭션이 진행이 되고...
											 현재 진행 중인 트랜잭션이 없다면
											 새로운 트랜잭션으로 진행된다.
											 
		propagation = Propagation.REQUIRES_NEW
		
	
	***이유?***
	@Transactional(propagation = Propagation.REQUIRED)
	public void insertAndPointUpOfMember
	@Transactional(propagation = Propagation.REQUIRES_NEW)	//기본값
	public int insert(Notice notice) throws ClassNotFoundException, SQLException
	하나의 클래스 안에서 두 개의 메서드가 트랜잭션이 걸려서 호출을 하게 되면
	스프링은 트랜잭션 처리가 되지 않는다.
	
	해결 ? 
	~~~~Hanlder			 ->		 [Service 클래스 ]  				->		 DAO
								@ T											@T
								insertAndPointUpOfMember					insert
								
	newlecture.service.MemberShipService 인터페이스
	NLMemberShipService 클래스
		